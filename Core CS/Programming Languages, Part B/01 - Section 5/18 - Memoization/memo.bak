#lang racket

; no memoization version
; 2 recursive calls, expensive computations
(define (fibonacci1 x)
  (if (or (= x 1) (= x 2))
      1
      (+ (fibonacci1 (- x 1))     ; 1st recursive call
         (fibonacci1 (- x 2)))))  ; 2nd recursive call

; no memoization version 2
(define (fibonacci2 x)
  (letrec ([f (lambda (acc1 acc2 y)
                (if (= y x)
                    (+ acc1 acc2)
                    (f (+ acc1 acc2) acc1 (+ y 1))))])
    (if (or (= x 1) (= x 2))
        1
        (f 1 1 3))))